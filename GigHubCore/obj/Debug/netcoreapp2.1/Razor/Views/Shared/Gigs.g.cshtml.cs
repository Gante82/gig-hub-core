#pragma checksum "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cfe86c54bf472cb656e2ed69bb44ff5312291fbc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Gigs), @"mvc.1.0.view", @"/Views/Shared/Gigs.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/Gigs.cshtml", typeof(AspNetCore.Views_Shared_Gigs))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\_ViewImports.cshtml"
using GigHubCore;

#line default
#line hidden
#line 2 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\_ViewImports.cshtml"
using GigHubCore.Models;

#line default
#line hidden
#line 1 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
using GigHubCore.ViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cfe86c54bf472cb656e2ed69bb44ff5312291fbc", @"/Views/Shared/Gigs.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d2a1e86af2b7d1c8de220015b0acf2dfad20c3cc", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Gigs : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<GigsViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(30, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(54, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 5 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
  
    ViewData["Title"] = Model.Heading;

#line default
#line hidden
            BeginContext(103, 6, true);
            WriteLiteral("\r\n<h1>");
            EndContext();
            BeginContext(110, 13, false);
#line 9 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
Write(Model.Heading);

#line default
#line hidden
            EndContext();
            BeginContext(123, 51, true);
            WriteLiteral("</h1>\r\n\r\n<ul class=\"gigs list-unstyled voffset4\">\r\n");
            EndContext();
#line 12 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
     foreach (var gig in Model.UpcomingGigs)
    {

#line default
#line hidden
            BeginContext(227, 142, true);
            WriteLiteral("        <li>\r\n            <div class=\"gig row\">\r\n                <div class=\"date col-xs-3 col-md-1\">\r\n                    <div class=\"month\">");
            EndContext();
            BeginContext(370, 28, false);
#line 17 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                                  Write(gig.DateTime.ToString("MMM"));

#line default
#line hidden
            EndContext();
            BeginContext(398, 45, true);
            WriteLiteral("</div>\r\n                    <div class=\"day\">");
            EndContext();
            BeginContext(444, 27, false);
#line 18 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                                Write(gig.DateTime.ToString("d "));

#line default
#line hidden
            EndContext();
            BeginContext(471, 156, true);
            WriteLiteral("</div>\r\n                </div>\r\n                <div class=\"details col-xs-5 col-md-2\">\r\n                    <span class=\"artist\">\r\n                        ");
            EndContext();
            BeginContext(628, 15, false);
#line 22 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                   Write(gig.Artist.Name);

#line default
#line hidden
            EndContext();
            BeginContext(643, 96, true);
            WriteLiteral("\r\n                    </span>\r\n                    <div class=\"genre\">\r\n                        ");
            EndContext();
            BeginContext(740, 14, false);
#line 25 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                   Write(gig.Genre.Name);

#line default
#line hidden
            EndContext();
            BeginContext(754, 102, true);
            WriteLiteral("\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-xs-2 col-md1\">\r\n");
            EndContext();
#line 29 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                     if (gig.IsCanceled)
                    {

#line default
#line hidden
            BeginContext(921, 75, true);
            WriteLiteral("                        <span class=\"label label-warning\">Canceled</span>\r\n");
            EndContext();
#line 32 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                    }

#line default
#line hidden
            BeginContext(1019, 20, true);
            WriteLiteral("                    ");
            EndContext();
#line 33 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                     if (Model.ShowActions)
                    {

#line default
#line hidden
            BeginContext(1087, 99, true);
            WriteLiteral("                        <div class=\"row\">\r\n                            <a href=\"#\" data-artist-id=\"");
            EndContext();
            BeginContext(1187, 12, false);
#line 36 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                                                   Write(gig.ArtistId);

#line default
#line hidden
            EndContext();
            BeginContext(1199, 71, true);
            WriteLiteral("\" class=\"js-toggle-follow\">follow</a>\r\n                        </div>\r\n");
            EndContext();
#line 38 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                        if (!gig.IsCanceled)
                        {

#line default
#line hidden
            BeginContext(1343, 100, true);
            WriteLiteral("                            <div class=\"row\">\r\n                                <button data-gig-id=\"");
            EndContext();
            BeginContext(1444, 6, false);
#line 41 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                                                Write(gig.Id);

#line default
#line hidden
            EndContext();
            BeginContext(1450, 100, true);
            WriteLiteral("\" class=\"btn btn-default js-toggle-attendance\">Going?</button>\r\n                            </div>\r\n");
            EndContext();
#line 43 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
                        }
                    }

#line default
#line hidden
            BeginContext(1600, 59, true);
            WriteLiteral("                </div>\r\n            </div>\r\n        </li>\r\n");
            EndContext();
#line 48 "C:\Users\rmm_3\source\repos\GigHubCore\GigHubCore\Views\Shared\Gigs.cshtml"
    }

#line default
#line hidden
            BeginContext(1666, 9, true);
            WriteLiteral("</ul>\r\n\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(1698, 3396, true);
                WriteLiteral(@"
    <script>
        const addAttendance = button => {
            fetch('https://localhost:44367/api/attendances'
                , {
                    method: ""post"", // *get, post, put, delete, etc.
                    mode: ""cors"", // no-cors, cors, *same-origin
                    cache: ""no-cache"", // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: ""same-origin"", // include, same-origin, *omit
                    headers: {
                        ""content-type"": ""application/json; charset=utf-8"",
                        // ""content-type"": ""application/x-www-form-urlencoded"",
                    },
                    redirect: ""follow"", // manual, *follow, error
                    referrer: ""no-referrer"", // no-referrer, *client
                    body: JSON.stringify({ gigId: button.dataset.gigId }) // body data type must match ""content-type"" header
                })
                .then(response => {
                    console.log(res");
                WriteLiteral(@"ponse);
                    if (response.status === 200) {
                        button.classList.remove('btn-default');
                        button.classList.add('btn-info');
                        button.innerHTML = 'going';
                    }
                    else {
                        console.log('Something failed!');
                    }
                }); // parses response to json
        };

        const addFollow = button => {
            fetch('https://localhost:44367/api/followups'
                , {
                    method: ""post"", // *get, post, put, delete, etc.
                    mode: ""cors"", // no-cors, cors, *same-origin
                    cache: ""no-cache"", // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: ""same-origin"", // include, same-origin, *omit
                    headers: {
                        ""content-type"": ""application/json; charset=utf-8"",
                        // ""content-type"": ""appli");
                WriteLiteral(@"cation/x-www-form-urlencoded"",
                    },
                    redirect: ""follow"", // manual, *follow, error
                    referrer: ""no-referrer"", // no-referrer, *client
                    body: JSON.stringify({ artistId: button.dataset.artistId }) // body data type must match ""content-type"" header
                })
                .then(response => {
                    console.log(response);
                    if (response.status === 200) {
                        button.innerHTML = 'following';
                    }
                    else {
                        console.log('Something failed!');
                    }
                }); // parses response to json
        };


        window.onload = () => {
            let buttonsAttendance = document.querySelectorAll('.js-toggle-attendance');

            buttonsAttendance.forEach(button => {
                button.addEventListener('click', e => {
                    addAttendance(e.target);
              ");
                WriteLiteral(@"  });

            });

            let buttonsFollow = document.querySelectorAll('.js-toggle-follow');

            buttonsFollow.forEach(button => {
                button.addEventListener('click', e => {
                    addFollow(e.target);
                });

            });
        };
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<GigsViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
